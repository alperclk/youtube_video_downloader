import requests
import datetime


class YouTube(object):

    def __init__(self, api_key, version=3):
        self.api_key = api_key
        if version == 3:
            self.endpoint = 'https://www.googleapis.com/youtube/v3/'

    @staticmethod
    def _get_request(url):
        return requests.get(url).json()

    def get_channels(self, username):
        """ get channels associated with the username """
        endpoint = self.endpoint + "channels?key=%s&forUsername=%s&part=id" % (self.api_key, username)
        response = self._get_request(endpoint)
        channels = response['items']
        results = []
        [results.append(channel['id']) for channel in channels] if channels else None,
        return results

    def _get_channel_id(self, **kwargs):
        """ gets the channel id """
        channel_id = kwargs.get('channel_id', None)

        if not channel_id:
            username = kwargs.get('username', None)
            channels = self.get_channels(username)
            if channels:
                channel_id = channels[0]
            if not channel_id:
                raise ValueError('No Channel ID Found, Haulting')
        return channel_id

    def _search_channel(self, search_type, **kwargs):
        """ searches the channel for the given type """
        if search_type not in ['video', 'playlist']:
            raise ValueError("What are you trying to do??")

        channel_id = self._get_channel_id(**kwargs)
        max_results = kwargs.get('max_results', 50)

        endpoint = self.endpoint + "search?key=%s&channelId=%s&part=snippet,id&order=date&maxResults=%s&type=%s" \
                                   % (self.api_key, channel_id, max_results, search_type)

        response = self._get_request(endpoint)
        results = []

        for item in response['items']:
            results.append(item['snippet'])
        return dict(
            nextPageToken=response['nextPageToken'] if 'nextPageToken' in response else None,
            results=results
        )

    def get_videos(self, **kwargs):
        """ gets the public videos in a channel """
        return self._search_channel(search_type='video', **kwargs)

    def get_playlists(self, **kwargs):
        """ Gets playlists in a channel """
        return self._search_channel(search_type='playlist', **kwargs)

    def get_video_details(self, video_id, **kwargs):
        """Gets details about the given video """
        endpoint = self.endpoint + 'videos?key=%s&part=snippet,statistics&id=%s' % (self.api_key, video_id)
        return self._get_request(endpoint)